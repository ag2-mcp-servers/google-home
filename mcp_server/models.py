# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T00:35:36+00:00

from __future__ import annotations

from typing import Any, Dict, List

from pydantic import BaseModel, Field, RootModel


class AccessibilityRequest(BaseModel):
    endpoint_enabled: bool
    hotword_enabled: bool


class AlarmVolumeRequest(BaseModel):
    volume: int


class Aogh(BaseModel):
    aogh_api_version: str


class AppDeviceIDRequest(BaseModel):
    app_id: str


class Audio(BaseModel):
    digital: bool


class BuildInfo(BaseModel):
    build_type: int
    cast_build_revision: str
    cast_control_version: int
    preview_channel_state: int
    release_track: str
    system_build_number: str


class Capabilities(BaseModel):
    aogh_supported: bool
    assistant_supported: bool
    audio_hdr_supported: bool
    audio_surround_mode_supported: bool
    ble_supported: bool
    bluetooth_audio_sink_supported: bool
    bluetooth_audio_source_supported: bool
    bluetooth_supported: bool
    cloudcast_supported: bool
    content_filters_supported: bool
    display_supported: bool
    fdr_supported: bool
    hdmi_prefer_50hz_supported: bool
    hdmi_prefer_high_fps_supported: bool
    hotspot_supported: bool
    https_setup_supported: bool
    input_management_supported: bool
    keep_hotspot_until_connected_supported: bool
    multi_user_supported: bool
    multichannel_group_supported: bool
    multizone_supported: bool
    night_mode_supported: bool
    night_mode_supported_v2: bool
    opencast_supported: bool
    preview_channel_supported: bool
    reboot_supported: bool
    remote_ducking_supported: bool
    separate_tts_volume_supported: bool
    setup_supported: bool
    sleep_mode_supported: bool
    stats_supported: bool
    system_sound_effects_supported: bool
    user_eq_supported: bool
    wifi_auto_save_supported: bool
    wifi_regulatory_domain_locked: bool
    wifi_supported: bool


class ChangeDiscoverabilityRequest(BaseModel):
    enable_discovery: bool


class CheckReadyStatusRequest(BaseModel):
    play_ready_message: bool
    user_id: str


class ConnecttoWiFiNetworkRequest(BaseModel):
    bssid: str
    enc_passwd: str
    signal_level: int
    ssid: str
    wpa_auth: int
    wpa_cipher: int


class DatePattern(BaseModel):
    day: int
    month: int
    year: int


class DeleteAlarmsandTimersRequest(BaseModel):
    ids: List[str]


class Device(BaseModel):
    bond_date: float
    device_class: int
    device_type: int
    last_connect_date: int
    mac_address: str
    name: str
    rssi: int
    service_uuids: List[str]


class DeviceInfo(BaseModel):
    field_4k_blocked: int = Field(..., alias='4k_blocked')
    capabilities: Capabilities
    cloud_device_id: str
    factory_country_code: str
    hotspot_bssid: str
    local_authorization_token_hash: str
    mac_address: str
    manufacturer: str
    model_name: str
    product_name: str
    public_key: str
    ssdp_udn: str
    uma_client_id: str
    uptime: float
    weave_device_id: str


class Example11(BaseModel):
    app_device_id: str
    certificate: str
    signed_data: str


class Example111(BaseModel):
    bond_date: float
    device_class: int
    device_type: int
    last_connect_date: float
    mac_address: str
    name: str
    rssi: int
    service_uuids: List[str]


class Example112(BaseModel):
    device_class: int
    device_type: int
    expected_profiles: int
    mac_address: str
    name: str
    rssi: int


class Example113(BaseModel):
    ssid: str
    wpa_auth: int
    wpa_cipher: int
    wpa_id: int


class Example114(BaseModel):
    bssid: str
    signal_level: int
    ssid: str
    wpa_auth: int
    wpa_cipher: int
    wpa_id: int


class Example12(BaseModel):
    token: str


class Example13(BaseModel):
    can_enroll: bool
    enrollment_state: int
    error_code: int
    ready: bool
    retryable: bool


class Example14(BaseModel):
    display_string: str
    offset: int
    timezone: str


class Example15(BaseModel):
    display_string: str
    locale: str


class Example16(BaseModel):
    bytes_received: int
    response_code: int
    time_for_data_fetch: int
    time_for_http_response: int


class Example19(BaseModel):
    success: bool


class ForgetWiFiNetworkRequest(BaseModel):
    wpa_id: int


class ForgetpaireddeviceRequest(BaseModel):
    bond: bool
    mac_address: str


class Getcurrentstate(BaseModel):
    notifications_enabled: bool


class Getcurrentvalues(BaseModel):
    endpoint_enabled: bool
    hotword_enabled: bool


class Getvolume(BaseModel):
    volume: float


class HighShelf(BaseModel):
    frequency: int
    gain_db: int
    quality: float


class HighShelf1(BaseModel):
    gain_db: int


class IconList(BaseModel):
    depth: int
    height: int
    mimetype: str
    url: str
    width: int


class Locale(BaseModel):
    display_string: str


class LowShelf(BaseModel):
    frequency: int
    gain_db: int
    quality: float


class LowShelf1(BaseModel):
    gain_db: int


class Multizone(BaseModel):
    audio_output_delay: int
    audio_output_delay_hdmi: int
    audio_output_delay_oem: int
    aux_in_group: str
    dynamic_groups: List[str]
    groups: List[str]
    multichannel_status: int


class Net(BaseModel):
    ethernet_connected: bool
    ip_address: str
    online: bool


class Opencast(BaseModel):
    pin_code: str


class OptIn(BaseModel):
    audio_hdr: bool
    audio_surround_mode: int
    autoplay_on_signal: bool
    cloud_ipc: bool
    hdmi_prefer_50hz: bool
    hdmi_prefer_high_fps: bool
    managed_mode: bool
    opencast: bool
    preview_channel: bool
    remote_ducking: bool
    stats: bool
    ui_flipped: bool
    wpa3_support_enabled: bool


class OptIn1(BaseModel):
    opencast: bool
    preview_channel: bool
    remote_ducking: bool
    stats: bool


class PairwithSpeakerRequest(BaseModel):
    connect: bool
    mac_address: str
    profile: int


class Proxy(BaseModel):
    mode: str


class RebootandFactoryResetRequest(BaseModel):
    params: str


class RemoteSink(BaseModel):
    bond_date: float
    device_class: int
    device_type: int
    last_connect_date: int
    mac_address: str
    name: str
    rssi: int
    service_uuids: List[str]


class ScanfordevicesRequest(BaseModel):
    clear_results: bool
    enable: bool
    timeout: int


class SetEqualizerValuesRequest(BaseModel):
    high_shelf: HighShelf1
    low_shelf: LowShelf1


class Settings(BaseModel):
    closed_caption: Dict[str, Any]
    control_notifications: int
    country_code: str
    locale: str
    network_standby: int
    system_sound_effects: bool
    time_format: int
    timezone: str
    wake_on_cast: int


class Settings1(BaseModel):
    control_notifications: int


class Sign(BaseModel):
    certificate: str
    intermediate_certs: List[str]
    nonce: str
    signed_data: str


class Stats(BaseModel):
    num_check_connectivity: int
    num_connect_wifi: int
    num_connected_wifi_not_saved: int
    num_initial_eureka_info: int
    num_obtain_ip: int


class TestInternetDownloadSpeedRequest(BaseModel):
    url: str


class TimePattern(BaseModel):
    hour: int
    minute: int
    second: int


class Timer(BaseModel):
    fire_time: int
    id: str
    original_duration: int
    status: int


class Timezone(BaseModel):
    display_string: str
    offset: int


class UserEq(BaseModel):
    high_shelf: HighShelf
    low_shelf: LowShelf
    max_peaking_eqs: int
    peaking_eqs: List[str]


class Wifi(BaseModel):
    bssid: str
    has_changes: bool
    noise_level: int
    signal_level: int
    ssid: str
    wpa_configured: bool
    wpa_id: int
    wpa_state: int


class Window(BaseModel):
    days: List[int]
    length_hours: int
    start_hour: int


class Window2(BaseModel):
    days: List[int]
    length_hours: float
    start_hour: float


class BluetoothBondPostResponse(BaseModel):
    pass


class BluetoothConnectPostResponse(BaseModel):
    pass


class BluetoothDiscoveryPostResponse(BaseModel):
    pass


class BluetoothGetBondedGetResponse(RootModel[List[Example111]]):
    root: List[Example111]


class BluetoothScanPostResponse(BaseModel):
    pass


class BluetoothScanResultsGetResponse(RootModel[List[Example112]]):
    root: List[Example112]


class ConfiguredNetworksGetResponse(RootModel[List[Example113]]):
    root: List[Example113]


class ForgetWifiPostResponse(BaseModel):
    pass


class RebootPostResponse(BaseModel):
    pass


class ScanResultsGetResponse(RootModel[List[Example114]]):
    root: List[Example114]


class ScanWifiPostResponse(BaseModel):
    pass


class SetEurekaInfoPostResponse(BaseModel):
    pass


class SupportedLocalesGetResponse(RootModel[List[Example15]]):
    root: List[Example15]


class SupportedTimezonesGetResponse(RootModel[List[Example14]]):
    root: List[Example14]


class UserEqSetEqualizerPostResponse(BaseModel):
    pass


class Alarm(BaseModel):
    date_pattern: DatePattern
    fire_time: float
    id: str
    status: int
    time_pattern: TimePattern


class ConnectedDevice(BaseModel):
    device: Device
    enabled_profiles: int


class Detail(BaseModel):
    icon_list: List[IconList]
    locale: Locale
    timezone: Timezone


class Example110(BaseModel):
    audio_mode: int
    connected_devices: List[ConnectedDevice]
    connecting_devices: List[str]
    discovery_enabled: bool
    remote_sink: RemoteSink
    scanning_enabled: bool


class Example17(BaseModel):
    do_not_disturb: bool
    enabled: bool
    led_brightness: float
    volume: float
    windows: List[Window2]


class Example18(BaseModel):
    alarm: List[Alarm]
    timer: List[Timer]


class NightModeParams(BaseModel):
    device_override_do_not_disturb: int
    do_not_disturb: bool
    enabled: bool
    led_brightness: float
    volume: float
    windows: List[Window]


class NightModesettingsRequest(BaseModel):
    demo_to_user: bool
    do_not_disturb: bool
    enabled: bool
    led_brightness: float
    volume: float
    windows: List[Window]


class SetEurekaInfoRequest(BaseModel):
    name: str
    opt_in: OptIn1
    settings: Settings1


class Setup(BaseModel):
    qr_ssid_suffix: str
    setup_state: int
    ssid_suffix: str
    stats: Stats
    tos_accepted: bool


class Example1(BaseModel):
    aogh: Aogh
    audio: Audio
    build_info: BuildInfo
    detail: Detail
    device_info: DeviceInfo
    multizone: Multizone
    name: str
    net: Net
    night_mode_params: NightModeParams
    opencast: Opencast
    opt_in: OptIn
    proxy: Proxy
    settings: Settings
    setup: Setup
    sign: Sign
    user_eq: UserEq
    version: int
    wifi: Wifi
